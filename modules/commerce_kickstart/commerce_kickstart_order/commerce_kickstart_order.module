<?php

/**
 * @file
 * Provides Kickstart-specific cart and order customizations.
 */

/**
 * Implements hook_default_message_type_alter().
 */
function commerce_kickstart_order_default_message_type_alter(&$items) {
  if (isset($items['commerce_order_order_confirmation'])) {
    $items['commerce_order_order_confirmation']->purge = array(
      'override' => 1,
      'enabled' => 1,
      'quota' => '100',
      'days' => '30',
    );

    $items['commerce_order_order_confirmation']->message_text['und'] = array(
      array(
        'value' => 'Order [message:message-commerce-order:order-number] at [site:name]',
        'format' => NULL,
        'safe_value' => 'Order [message:message-commerce-order:order-number] at [site:name]'
      ),
      array(
        'value' => str_replace(array('\u0027', '\u003E', '\u003C', '\/'), array('"', '>', '<', '/'), "\u003Cdiv class=\u0027message-wrapper\u0027\u003E\r\n  \u003Cdiv class=\u0027header\u0027\u003E\r\n    \u003Cdiv class=\u0027logo\u0027\u003E\u003Ca href=\u0027[site:url]\u0027\u003E[site:site-logo]\u003C\/a\u003E\u003C\/div\u003E\r\n    \u003Cdiv class=\u0027thank-you\u0027\u003EThanks for your order\u003C\/div\u003E\r\n  \u003C\/div\u003E\r\n\r\n  \u003Cdiv class=\u0027body\u0027\u003E\r\n    \u003Cp class=\u0027detail\u0027\u003E\r\n      Here are the details for your order \u003Cspan class=\u0027order\u0027\u003E\u003Ca href=\u0027[message:message-commerce-order:view-url]\u0027\u003E#[message:message-commerce-order:order-id]\u003C\/a\u003E\u003C\/span\u003E, placed on [message:message-commerce-order:created]\r\n    \u003C\/p\u003E\r\n\r\n    \u003Cdiv class=\u0027view-order-status [message:message-commerce-order:status]\u0027\u003E\u003Ca href=\u0027[message:message-commerce-order:view-url]\u0027\u003EView your order\u003C\/a\u003E\u003C\/div\u003E\r\n\r\n    \u003Cdiv class=\u0027shipping-wrapper\u0027\u003E\r\n      \u003Cdiv class=\u0027ship-to\u0027\u003E\r\n        \u003Cp class=\u0027ship-to-title\u0027\u003EShip to\u003C\/p\u003E\r\n        \u003Cp class=\u0027details\u0027\u003E\r\n          [message:message-commerce-order:commerce-customer-shipping:commerce_customer_address]\r\n        \u003C\/p\u003E\r\n      \u003C\/div\u003E\r\n\r\n      \u003Cdiv class=\u0027ship-method\u0027\u003E\r\n        \u003Cp class=\u0027ship-method-title\u0027\u003E\u003C\/p\u003E\r\n        \u003Cp class=\u0027express-delivery\u0027\u003E\u003C\/p\u003E\r\n        \u003Cp class=\u0027details\u0027\u003E\u003C\/p\u003E\r\n      \u003C\/div\u003E\r\n    \u003C\/div\u003E\r\n\r\n\r\n    \u003Cdiv class=\u0027order-summary-wrapper\u0027\u003E\r\n    \u003Cp class=\u0027items-title\u0027\u003EItems in your order\u003C\/p\u003E\r\n     !order-summary\r\n    \u003C\/div\u003E\r\n\r\n    \u003Cp class=\u0027question\u0027\u003E\u003Cb\u003EOrder questions ?\u003C\/b\u003E \u003Ca href=\u0027[site:url]/contact\u0027\u003EContact us\u003C\/a\u003E\u003C\/p\u003E\r\n\r\n  \u003C\/div\u003E\r\n\u003C\/div\u003E\r\n"),
        'format'  => 'full_html',
        'safe_value' => str_replace(array('\u0027', '\u003E', '\u003C', '\/'), array('"', '>', '<', '/'), "\u003Cdiv class=\u0027message-wrapper\u0027\u003E\n\u003Cdiv class=\u0027header\u0027\u003E\n\u003Cdiv class=\u0027logo\u0027\u003E\u003Ca href=\u0027[site:url]\u0027\u003E[site:site-logo]\u003C\/a\u003E\u003C\/div\u003E\n\u003Cdiv class=\u0027thank-you\u0027\u003EThanks for your order\u003C\/div\u003E\n\u003C\/div\u003E\n\u003Cdiv class=\u0027body\u0027\u003E\n\u003Cp class=\u0027detail\u0027\u003E\n      Here are the details for your order \u003Cspan class=\u0027order\u0027\u003E\u003Ca href=\u0027[message:message-commerce-order:view-url]\u0027\u003E#[message:message-commerce-order:order-id]\u003C\/a\u003E\u003C\/span\u003E, placed on [message:message-commerce-order:created]\n    \u003C\/p\u003E\n\u003Cdiv class=\u0027view-order-status [message:message-commerce-order:status]\u0027\u003E\u003Ca href=\u0027[message:message-commerce-order:view-url]\u0027\u003EView your order\u003C\/a\u003E\u003C\/div\u003E\n\u003Cdiv class=\u0027shipping-wrapper\u0027\u003E\n\u003Cdiv class=\u0027ship-to\u0027\u003E\n\u003Cp class=\u0027ship-to-title\u0027\u003EShip to\u003C\/p\u003E\n\u003Cp class=\u0027details\u0027\u003E\n          [message:message-commerce-order:commerce-customer-shipping:commerce_customer_address]\n        \u003C\/p\u003E\n\u003C\/div\u003E\n\u003Cdiv class=\u0027ship-method\u0027\u003E\n\u003Cp class=\u0027ship-method-title\u0027\u003E\u003C\/p\u003E\n\u003Cp class=\u0027express-delivery\u0027\u003E\u003C\/p\u003E\n\u003Cp class=\u0027details\u0027\u003E\u003C\/p\u003E\n\u003C\/div\u003E\n\u003C\/div\u003E\n\u003Cdiv class=\u0027order-summary-wrapper\u0027\u003E\n\u003Cp class=\u0027items-title\u0027\u003EItems in your order\u003C\/p\u003E\n\u003Cp\u003E     !order-summary\n    \u003C\/p\u003E\u003C\/div\u003E\n\u003Cp class=\u0027question\u0027\u003E\u003Cb\u003EOrder questions ?\u003C\/b\u003E \u003Ca href=\u0027[site:url]/contact\u0027\u003EContact us\u003C\/a\u003E\u003C\/p\u003E\n\u003C\/div\u003E\n\u003C\/div\u003E\n"),
      ),
    );
  }
}

/**
 * Implements hook_commerce_line_item_summary_link_info_alter().
 */
function commerce_kickstart_order_commerce_line_item_summary_link_info_alter(&$links) {
  // Link checkout button to the cart.
  if (isset($links['checkout'])) {
    $links['checkout']['href'] = 'cart';
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_kickstart_order_views_api() {
  return array(
    "version" => "3.0",
    'path' => drupal_get_path('module', 'commerce_kickstart_order') . '/includes/views',
  );
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_kickstart_order_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['checkout_completion_review'] = array(
    'title' => t('Completion review'),
    'file' => drupal_get_path('module', 'commerce_kickstart_order') . '/commerce_kickstart_order.module',
    'base' => 'commerce_kickstart_order_completion_review_pane',
    'page' => 'complete',
    'fieldset' => FALSE,
    'weight' => 1,
  );

  return $checkout_panes;
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function commerce_kickstart_order_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $completion_review_pages = variable_get('commerce_checkout_completion_review_pages', array());
  // Do not include checkout panes on the completion review by default.
  foreach($checkout_panes as $pane_id => $checkout_pane) {
    if (!isset($checkout_panes[$pane_id]['complete'])) {
      $checkout_panes[$pane_id]['complete'] = isset($completion_review_pages[$pane_id]) ? $completion_review_pages[$pane_id] : FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_kickstart_order_form_commerce_checkout_pane_settings_form_alter(&$form, &$form_state, $form_id) {
  // Add complete setting on all checkout panes.
  $form['display']['complete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include this pane on the Completion review checkout pane.'),
    '#default_value' => $form['checkout_pane']['#value']['complete'],
    '#access' => (boolean) commerce_checkout_pane_callback($form['checkout_pane']['#value'], 'review'),
  );
  $form['submit']['#submit'][] = 'commerce_kickstart_order_commerce_checkout_pane_settings_form_submit';
}

/**
 * Form submit callback for checkout pane complete setting.
 */
function commerce_kickstart_order_commerce_checkout_pane_settings_form_submit($form, &$form_state) {
  $completion_review_pages = variable_get('commerce_checkout_completion_review_pages', array());
  $completion_review_pages[$form_state['values']['checkout_pane']['pane_id']] = $form_state['values']['complete'];
  variable_set('commerce_checkout_completion_review_pages', $completion_review_pages);
}

/**
 * Checkout pane callback: returns a pane allowing the customer to review the
 * details of the order.
 */
function commerce_kickstart_order_completion_review_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $pane_form = array();

  // Otherwise add any enabled checkout panes that are visible on completion_review.
  $pane_form['complete'] = array(
    '#theme' => 'commerce_checkout_review',
    '#data' => array('order' => array('title' => t('Order number'), 'data' => $order->order_number))
  );

  // Use the same system as the review pane since completion_review behave
  // the same way.
  foreach (commerce_checkout_pages() as $page_id => $checkout_page) {
    // Exit the loop once the complete page is reached.
    if ($page_id == 'complete') {
      break;
    }

    // Loop through all the panes on the current page specifying complete...
    foreach (commerce_checkout_panes(array('page' => $page_id, 'enabled' => TRUE, 'complete' => TRUE)) as $pane_id => $checkout_pane_local) {
      // If the pane has a valid review callback...
      if ($callback = commerce_checkout_pane_callback($checkout_pane_local, 'review')) {
        // Get the review data for this pane.
        $pane_data = $callback($form, $form_state, $checkout_pane_local, $order);

        // Only display the pane if there is data in the pane.
        if (!empty($pane_data)) {
          // Add a row for it in the completion_review data.
          $pane_form['complete']['#data'][$pane_id] = array(
            'title' => $checkout_pane_local['title'],
            'data' => $pane_data,
          );
        }
      }
    }
  }

  return $pane_form;
}
